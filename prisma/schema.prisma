// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Package {
  ID        String @id @default(cuid())
  name      String @unique
  files     String @db.LongText
  downloads Int    @default(0)

  // new fields:
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  dependents   Dependency[] @relation(name: "dependsOn")
  dependencies Dependency[] @relation(name: "dependencyFor")
}

model Dependency {
  ID    String  @id @default(cuid())
  for   Package @relation(name: "dependencyFor", fields: [forID], references: [ID])
  forID String  @map("packageID")

  dependsOn Package @relation(name: "dependsOn", fields: [depID], references: [ID])
  depID     String

  @@index([forID])
  @@index([depID])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
